name: Terraform CI/CD

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  id-token: write

jobs:
  lint-and-security:
    name: Lint and Security Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.50.2

      - name: Run TFLint
        run: tflint --init && tflint -f compact
        continue-on-error: true

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        continue-on-error: true

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ./
          framework: terraform
        continue-on-error: true

  terraform:
    name: Terraform Deployment
    runs-on: ubuntu-latest
    needs: lint-and-security

    env:
      AWS_REGION: us-east-1
      AWS_ROLE_ARN: arn:aws:iam::436450225331:role/oidc-assume-role
      CLUSTER_NAME: my-project-eks
      NAMESPACE: default

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Terraform Providers and Modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.terraform.d/plugin-cache
            .terraform
          key: terraform-${{ runner.os }}-${{ hashFiles('**/*.tf') }}
          restore-keys: terraform-${{ runner.os }}-

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.0

      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false
      
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name {{ env.CLUSTER_NAME }} --role-arn ${{ env.AWS_ROLE_ARN }}

      - name: Verify cluster access
        run: |
          kubectl get nodes

      # Optional: Run helm installation or diagnostics
      - name: Helm Version Check
        run: helm version

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install terraform-docs
        run: |
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/

          - name: Generate Terraform Docs
            run: |
            terraform-docs markdown . > README.md.new
            mv README.md.new README.md

          - name: Commit README.md
            run: |
              git config --local user.email "soundaryacshcl@gmail.com"
              git config --local user.name "soundaryacshcl"
              git add README.md
              git diff --cached --quiet || git commit -m "docs: Update README.md" && git push || echo "No changes to commit"
